name: release-electron

on:
  workflow_dispatch:

jobs:
  Release:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
    steps:
      - uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Install ElectronNET.CLI
        run: dotnet tool install ElectronNET.CLI -g

      - name: Get JSON Property
        id: read_json
        uses: notiz-dev/github-action-json-property@v0.2.0
        with:
          path: './${{ github.event.repository.name }}/electron.manifest.json'
          prop_path: 'build.buildVersion'
        
      - name: Build win target
        if: ${{ matrix.os == 'windows-latest' }}
        run: |
          electronize build /target win /electron-params "-p=never"
          if (-not [System.IO.File]::Exists("./bin/Desktop/${{ github.event.repository.name }} Setup ${{ steps.read_json.outputs.prop }}.exe")) {
            echo "::error::The win target assets were not created."; ls ./bin/Desktop/
          }
      - name: Build mac target
        if: ${{ matrix.os == 'macos-latest' }}
        run: |
          electronize build /target osx /electron-params "-p=never"
          if [ ! -f ./bin/Desktop/${{ github.event.repository.name }}-${{ steps.read_json.outputs.prop }}.dmg ]; then
            echo "::error::The mac target assets were not created."; ls ./bin/Desktop/
          fi
      - name: Build linux target
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          electronize build /target linux /electron-params "-p=never"
          if [ ! -f ./bin/Desktop/${{ github.event.repository.name }}-${{ steps.read_json.outputs.prop }}.AppImage ]; then
            echo "::error::The linux target assets were not created."; ls ./bin/Desktop/
          fi
