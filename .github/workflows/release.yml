name: release-electron

on:
  push:
    tags:
      - 'v*'

jobs:
  Release:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
    steps:
      - uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Install ElectronNET.CLI
        run: dotnet tool install ElectronNET.CLI -g
        
      - name: Build win target
        if: ${{ matrix.os == 'windows-latest' }}
        run: |
          $version = ${Env:GITHUB_REF_NAME}.replace('v', '')
          electronize build /target win /p:ProductVersion=${version} /electron-params "-p=never"
          if (-not [System.IO.File]::Exists("./bin/Desktop/${Env:GITHUB_REPOSITORY} Setup ${version}.exe")) {
            echo "::error::The win target assets were not created."
          }
      - name: Build mac target
        if: ${{ matrix.os == 'macos-latest' }}
        run: |
          electronize build /target osx /p:ProductVersion=${GITHUB_REF_NAME#v} /electron-params "-p=never"
          ls ./bin/Desktop/
          echo FILENAME is ${GITHUB_REPOSITORY}-${GITHUB_REF_NAME#v}.dmg
          if [ ! -f ./bin/Desktop/${GITHUB_REPOSITORY}-${GITHUB_REF_NAME#v}.dmg ]; then
            echo "::error::The mac target assets were not created."
          fi
      - name: Build linux target
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          sudo rm -rf /home/runner/.cache/electron-builder/appimage/  # https://github.com/electron-userland/electron-builder/issues/8061
          electronize build /target linux /p:ProductVersion=${GITHUB_REF_NAME#v} /electron-params "-p=never"
          if [ ! -f ./bin/Desktop/${GITHUB_REPOSITORY}-${GITHUB_REF_NAME#v}.appimage ]; then
            echo "::error::The linux target assets were not created."
          fi
